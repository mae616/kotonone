name: CI - Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]

env:
  NODE_VERSION: '20.x'
  JAVASCRIPT_PROJECT: true

jobs:
  # コード品質チェック（JavaScript特化）
  lint-and-format:
    name: 🔍 JavaScript Lint & Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run Next.js ESLint
        run: npm run lint

      - name: 🔍 Run JavaScript specific ESLint
        run: npm run lint:js

      - name: 🎨 Check JavaScript formatting
        run: npm run lint:format

      - name: 🔍 Optional TypeScript type check (for JSDoc)
        run: npm run typecheck
        continue-on-error: true

  # セキュリティスキャン
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🛡️ npm audit
        run: npm run security:audit

      - name: 🛡️ Check production dependencies
        run: npm run security:deps

      - name: 🛡️ JavaScript security check
        run: npm run security:js
        continue-on-error: true

  # ビルドテスト
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build:production
        env:
          NODE_ENV: production

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # テスト実行（現在はプレースホルダー）
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit

      - name: 🧪 Run E2E tests
        run: npm run test:e2e

  # CodeQL分析（セキュリティ）
  codeql-analysis:
    name: 🔒 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 依存関係脆弱性チェック
  dependency-check:
    name: 📋 Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Run Dependabot security check
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # 全てのジョブが成功した場合のステータスチェック
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, build-test, test, codeql-analysis, dependency-check]
    if: always()
    steps:
      - name: ✅ Check all jobs status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" && \
                "${{ needs.build-test.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.codeql-analysis.result }}" == "success" && \
                "${{ needs.dependency-check.result }}" == "success" ]]; then
            echo "🎉 All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi