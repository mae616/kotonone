name: CD - Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch: # 手動実行を許可

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # CI チェック（本番デプロイ前の最終確認）
  pre-deployment-checks:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Final lint & type check
        run: npm run ci:lint

      - name: 🛡️ Final security check
        run: npm run ci:security

      - name: 🧪 Final test suite
        run: npm run ci:test

  # 本番ビルド
  production-build:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build:production
        env:
          NODE_ENV: production

      - name: 📊 Build artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            .next/
            package.json
            package-lock.json
          retention-days: 30

  # Vercel デプロイ
  deploy-to-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [production-build]
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Vercel CLI
        run: npm install -g vercel@latest

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build

      - name: 🏗️ Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel
        id: deployment
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Deployed to: $DEPLOYMENT_URL"

      - name: 📝 Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Production deployment successful!**\n\nDeployment URL: ${{ steps.deployment.outputs.deployment_url }}'
            })

  # デプロイ後ヘルスチェック
  post-deployment-tests:
    name: 🔍 Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-to-vercel]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Health check - Homepage
        run: |
          echo "🔍 Checking homepage availability..."
          curl -f -s -o /dev/null https://kotonone.vercel.app || (echo "❌ Homepage check failed" && exit 1)
          echo "✅ Homepage is accessible"

      - name: 🔍 Health check - API endpoints
        run: |
          echo "🔍 Checking API endpoint health..."
          # Basic API availability check (adjust URL as needed)
          curl -f -s -o /dev/null https://kotonone.vercel.app/api/health || echo "⚠️ API health check endpoint not found (this is expected if not implemented)"
          echo "✅ Basic deployment verification complete"

  # デプロイ成功通知
  deployment-success:
    name: ✅ Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-to-vercel, post-deployment-tests]
    if: always() && needs.deploy-to-vercel.result == 'success'
    steps:
      - name: ✅ Deployment success notification
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "📊 Deployment summary:"
          echo "  • Environment: Production"
          echo "  • Platform: Vercel"
          echo "  • Status: ✅ Success"
          echo "  • Time: $(date)"

  # デプロイ失敗時のロールバック準備
  deployment-failure:
    name: ❌ Deployment Failure Handling
    runs-on: ubuntu-latest
    needs: [deploy-to-vercel, post-deployment-tests]
    if: always() && (needs.deploy-to-vercel.result == 'failure' || needs.post-deployment-tests.result == 'failure')
    steps:
      - name: ❌ Deployment failure notification
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Check the logs above for details"
          echo "🛠️ Consider manual rollback if necessary"
          exit 1